Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.





-----------------------------------------------------------------------------------------------------------------------------------------------------





class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        
        ans = 0
        i=0
        j=0
        charSet = set()
        
        for j in range(len(s)):
            while s[j] in charSet:
                charSet.remove(s[i])
                i+=1
            charSet.add(s[j])
            ans = max(ans,len(charSet))
        return ans
    
 
 
 
 
 -------------------------------------------------------------------------------------------------------------
 
 
 
 
 wrong answer
             # subst = ""  
#         while j<len(s):
            
#             if s[j] in subst:
#                 ans = max(ans, len(subst))
#                 subst[1:len(subst)]
#                 i+=1
                
