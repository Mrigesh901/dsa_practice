Given an array A of n positive numbers. The task is to find the first Equilibium Point in the array. 
Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Note: Retun the index of Equilibrium point. (1-based index)

Example 1:

Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 
 

Example 2:

Input:
n = 1
A[] = {1}
Output: 1
Explanation:
Since its the only element hence
its the only equilibrium point.
 

Your Task:
The task is to complete the function equilibriumPoint() which takes the array and n as input parameters and returns the point of equilibrium. Return -1 if no such point exists.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 106
1 <= A[i] <= 108














----------------------------------------------------------------------------------------------------------------------------------------------------












class Solution:
    # Complete this function
    
    #Function to find equilibrium point in the array.
    def equilibriumPoint(self,A, N):
        # Your code here
        ps = []
        sumA = 0
        for i in range(N):
            sumA = sumA+A[i]
            ps.append(sumA)
         
        l =0
        h = N-1
        
        while l<=h:
            if N==1:
                return 1
            mid = (l+h)//2
            if mid==0:
                if ps[mid]==ps[N-1]-ps[mid+1]:
                    return mid+2
                else:
                    return -1
            
            if ps[mid-1]==ps[N-1]-ps[mid]:
                return mid+1
            elif ps[mid-1]<ps[N-1]-ps[mid]:
                l = mid+1
            else:
                h = mid-1
        return -1
        
